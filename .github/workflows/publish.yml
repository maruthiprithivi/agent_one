name: Publish to PyPI

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., 0.1.0)"
        required: false
        default: ""

jobs:
  build-n-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version:
          - "3.13"
          - "3.11"
          - "3.12"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Set version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.get_tag.outputs.TAG }}" >> $GITHUB_OUTPUT
          fi

      - name: Update version in pyproject.toml and README.md
        run: |
          version="${{ steps.version.outputs.VERSION }}"
          # Remove 'v' prefix if present
          version="${version#v}"

          # Update pyproject.toml
          sed -i 's/version = "[^"]*"/version = "'"${version}"'"/' pyproject.toml

          # Update README.md if it contains version badges or references
          if grep -q "version-" README.md || grep -q "currently in version" README.md; then
            sed -i 's/version-[^-]*-brightgreen/version-'"${version}"'-brightgreen/g' README.md
            sed -i 's/This project is currently in version [^)]\+/This project is currently in version '"${version}"'/g' README.md
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}

      - name: Create Virtual Environment
        run: uv venv

      - name: Install dependencies
        run: |
          if [ -f pyproject.toml ]; then
            uv pip install -e .
          fi
          uv pip install build pytest

      - name: Run tests
        run: uv run pytest

      - name: Build package
        run: uv run python -m build

      - name: Publish to PyPI
        if: matrix.python-version == '3.13'
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Commit version updates
        if: matrix.python-version == '3.13' && github.event_name == 'workflow_dispatch' && github.event.inputs.version != ''
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml README.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.VERSION }}"
          git tag -a "v${{ steps.version.outputs.VERSION }}" -m "Release v${{ steps.version.outputs.VERSION }}"
          git push origin HEAD:main
          git push origin "v${{ steps.version.outputs.VERSION }}"
